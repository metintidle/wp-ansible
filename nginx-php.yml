---
- name: Setup WordPress on Amazon Linux 2 with Nginx and PHP
  hosts: all
  become: yes

  tasks:
    - name: Update the package index
      yum:
        name: "*"
        state: latest

    - name: Install Nginx using amazon-linux-extras
      command: amazon-linux-extras install -y nginx1

    - name: Start and enable Nginx service
      systemd:
        name: nginx
        state: started
        enabled: yes

    - name: Check if Nginx is running
      command: systemctl status nginx
      register: nginx_status
      ignore_errors: yes

    - name: Display Nginx status
      debug:
        var: nginx_status.stdout

    - name: Install PHP using amazon-linux-extras
      command: amazon-linux-extras enable php8.2

    - name: Instal PHP-FPM  dependencies
      yum:
        name:
          - php-fpm
          - php-mysqlnd
          - php-mbstring
          - php-intl
          - gcc
          - ImageMagick
          - ImageMagick-devel
          - php-pear
          - php-devel
          - php-gd
          - php-sqlite3
        state: present

    - name: Start and enable php ignbinary
      ansible.builtin.command:
       cmd: sudo pecl install igbinary

    - name: Ensure pexpect is installed
      pip:
        name: pexpect
        state: present

    - name: Update PHP-FPM configuration for 512MB RAM
      lineinfile:
        path: /etc/php-fpm.d/www.conf
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
      with_items:
        - { regexp: "^pm =.*", line: "pm = ondemand" }
        - { regexp: "^pm.max_children =.*", line: "pm.max_children = 5" }
        - { regexp: "^pm.start_servers =.*", line: "pm.start_servers = 2" }
        - {
            regexp: "^pm.min_spare_servers =.*",
            line: "pm.min_spare_servers = 1",
          }
        - {
            regexp: "^pm.max_spare_servers =.*",
            line: "pm.max_spare_servers = 3",
          }
        - { regexp: "^;pm.max_requests =.*", line: "pm.max_requests = 500" }

    - name: Increase PHP upload size
      lineinfile:
        path: /etc/php.ini
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
      with_items:
        - {
            regexp: "^upload_max_filesize =.*",
            line: "upload_max_filesize = 300M",
          }
        - { regexp: "^post_max_size =.*", line: "post_max_size = 300M" }

    - name: Restart PHP-FPM and Nginx
      service:
        name: "{{ item }}"
        state: restarted
      with_items:
        - nginx
        - php-fpm
      tags: restart

    - name: Test Nginx configuration
      command: nginx -t
      register: nginx_test_result
      ignore_errors: yes

    - name: Restart Nginx
      service:
        name: nginx
        state: restarted
      when: nginx_test_result.rc == 0

    - name: Add ec2-user to nginx group
      user:
        name: ec2-user
        groups: nginx
        append: yes

    - name: Check if nginx cache directory exists
      ansible.builtin.stat:
        path: /var/run/nginx-cache
      register: nginx_cache_dir

    - name: Create nginx cache directory and set ownership
      ansible.builtin.shell: >
        sudo mkdir -p /var/run/nginx-cache && sudo chown -R ec2-user:nginx /var/run/nginx-cache
      when: nginx_cache_dir.stat.exists == False

    - name: Create cron job to change ownership of nginx cache directory
      cron:
        name: "Change ownership of nginx cache directory"
        minute: "0"
        hour: "*/6"
        user: root
        job: "chown -R ec2-user:nginx /var/run/nginx-cache && chmod -R 774 /var/run/nginx-cache"

    - name: Get total memory
      ansible.builtin.shell: cat /proc/meminfo | grep MemTotal | awk '{print $2}'
      register: total_memory
      changed_when: false

    - name: Copy nginx.config for low memory
      ansible.builtin.copy:
        src: configs/nginx.config
        dest: /etc/nginx/nginx.conf
        owner: root
        group: root
        mode: '0644'
      when: (total_memory.stdout|int / 1024) < 900  # Less than 1GB

    - name: Copy nginx-static.config for higher memory
      ansible.builtin.copy:
        src: configs/nginx-static.config
        dest: /etc/nginx/nginx.conf
        owner: root
        group: root
        mode: '0644'
      when: (total_memory.stdout|int / 1024) >= 900  # 1GB or more

    - name: Create symbolic link from web serverâ€™s document root to home directory
      file:
        src: /usr/share/nginx/html
        dest: /home/ec2-user/html
        state: link

    - name: Change ownership of WordPress files to ec2-user and nginx
      lineinfile:
        path: /etc/php-fpm.d/www.conf
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
      with_items:
        - { regexp: "^user =.*", line: "user = ec2-user" }
        - { regexp: "^group =.*", line: "group = nginx" }

    - name: Restart PHP-FPM and Nginx
      service:
        name: "{{ item }}"
        state: restarted
      with_items:
        - php-fpm
        - nginx

    - name: Change ownership of WordPress files to ec2-user and nginx
      file:
        path: /usr/share/nginx/html/
        owner: ec2-user
        group: nginx
        recurse: yes

    - name: Update the PECL channel
      command: pecl channel-update pecl.php.net

    - name: Install imagick PHP extension non-interactively
      expect:
        command: pecl install imagick
        responses:
          'Please provide the prefix of ImageMagick installation \[autodetect\] :': "\r"

    - name: Enable the imagick extension
      lineinfile:
        path: /etc/php.d/20-imagick.ini
        line: "extension=imagick.so"
        create: yes


    - name: install php opcache
      ansible.builtin.command:
        cmd: sudo yum install php-opcache -y


    - name: Restart PHP-FPM service
      service:
        name: php-fpm
        state: restarted

    ## Path: fix.yml
    - name: fpm
      stat:
        path: /home/ec2-user/fpm.sh
      register: fpm_file
      tags: fpm

    - name: Copy file to remote server
      copy:
        src: fpm.sh
        dest: /home/ec2-user/fpm.sh
        mode: 0755
      # when: not fpm_file.stat.exists

    - name: Add a cron job to run fpm.sh every minute
      cron:
        name: "Run fpm.sh every minute"
        minute: "*"
        job: "/home/ec2-user/fpm.sh >> /var/log/fpm.log 2>&1"
      when: not fpm_file.stat.exists

    - name: remove file /var/log/fpm.log
      command: rm -f /var/log/fpm.log

    - name: Create a swap file
      command: fallocate -l 1G /swapfile
      args:
        creates: /swapfile

    - name: Check if swap is already enabled
      command: swapon --show
      register: swap_status
      changed_when: false

    - name: Set up the swap file
      command: mkswap /swapfile
      when: swap_status.stdout == ""

    - name: Enable the swap file
      command: swapon /swapfile
      when: swap_status.stdout == ""

    - name: Add swap file to /etc/fstab
      lineinfile:
        path: /etc/fstab
        line: '/swapfile none swap sw 0 0'
        create: yes
      when: swap_status.stdout == ""

    - name: Set correct permissions on swap file
      file:
        path: /swapfile
        mode: '0600'
        owner: root
        group: root
