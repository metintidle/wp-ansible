---
- name: Setup WordPress on Amazon Linux 2 with Nginx and PHP
  hosts: all
  vars:
   site_url: "http://{{ inventory_hostname }}" # Use the inventory IP for the site URL

  tasks:
    - name: Install MySQL client
      command: "yum install -y mysql"
      become: yes

    - name: Create database for WordPress
      command: >
        mysql -u {{ lookup('env', 'DB_USER') }} -p{{ lookup('env', 'DB_PASS') }} -h {{ lookup('env', 'DB_HOST') }} -e "CREATE DATABASE IF NOT EXISTS {{ db_name }};"

    - name: remove mysql
      command: "yum remove -y mysql"
      become: yes

    - name: Check if WP-CLI is already installed
      stat:
        path: /usr/local/bin/wp
      register: wp_cli_installed
      become: yes

    - name: Download WP-CLI
      get_url:
        url: https://github.com/wp-cli/wp-cli/releases/download/v2.11.0/wp-cli-2.11.0.phar
        dest: /usr/local/bin/wp-cli.phar
        mode: "0755"
      become: yes
      when: not wp_cli_installed.stat.exists

    - name: List details of wp-cli.phar
      command: ls -al /usr/local/bin/wp-cli.phar
      register: wp_cli_phar_details
      become: yes
      when: not wp_cli_installed.stat.exists

    - name: Display wp-cli.phar details
      debug:
        var: wp_cli_phar_details.stdout
      when: not wp_cli_installed.stat.exists

    - name: Move WP-CLI to /usr/local/bin/wp
      command: mv /usr/local/bin/wp-cli.phar /usr/local/bin/wp
      become: yes
      when: not wp_cli_installed.stat.exists

    - name: Check if WordPress is already installed
      stat:
        path: /home/ec2-user/html/wp-signup.php
      register: wordpress_downloaded
      become: yes

    - name: Print message if WordPress is already installed
      debug:
        msg: "WordPress is already installed."
      when: wordpress_downloaded.stat.exists

    - name: Download WordPress tarball
      get_url:
        url: https://en-au.wordpress.org/wordpress-6.7.1-en_AU.tar.gz
        dest: /home/ec2-user/wordpress-6.7.1-en_AU.tar.gz
        mode: "0644"
      become: yes
      when: not wordpress_downloaded.stat.exists

    - name: Extract WordPress tarball directly to html directory
      unarchive:
        src: /home/ec2-user/wordpress-6.7.1-en_AU.tar.gz
        dest: /home/ec2-user/html/
        remote_src: yes
        extra_opts: [--strip-components=1]
      when: not wordpress_downloaded.stat.exists

    - name: Change ownership of all files in html directory
      file:
        path: /home/ec2-user/html/
        owner: ec2-user
        group: nginx
        recurse: yes
      become: yes
      when: not wordpress_downloaded.stat.exists

    - name: Verify WP-CLI installation
      command: /usr/local/bin/wp --info
      register: wp_cli_info

    - name: Display WP-CLI info
      debug:
        var: wp_cli_info.stdout

    - name: Check if wp-config.php exists
      stat:
        path: /home/ec2-user/html/wp-config.php
      register: wp_config_exists

    - name: Create wp-config.php
      command: >
        /usr/local/bin/wp config create
        --dbname={{db_name}}
        --dbuser={{ lookup('env', 'DB_USER') }}
        --dbpass={{ lookup('env', 'DB_PASS') }}
        --dbhost={{ lookup('env', 'DB_HOST') }}
        --dbprefix={{db_prefix}}
      args:
        chdir: /home/ec2-user/html
      when: not wp_config_exists.stat.exists


    - name: Fix WordPress FTP error
      lineinfile:
        path: "/home/ec2-user/html/wp-config.php"
        regexp: "^define\\('FS_METHOD',"
        line: "define('FS_METHOD', 'direct');"
        backup: yes
      when: not wp_config_exists.stat.exists

    - name: Set WordPress memory limit
      lineinfile:
        path: "/home/ec2-user/html/wp-config.php"
        regexp: "^define\\('WP_MEMORY_LIMIT',"
        line: "define('WP_MEMORY_LIMIT', '128M');"
        backup: yes


    - name: Install WordPress
      command: >
        wp core install
        --url="{{ site_url }}"
        --title="New website"
        --admin_user="itt-admin"
        --admin_password="itt@123"
        --admin_email="wp.monitoring.log@gmail.com"
      args:
        chdir: /home/ec2-user/html

    - name: Install WPvivid Backup Plugin
      command: wp plugin install wpvivid-backuprestore --activate
      args:
        chdir: /home/ec2-user/html

    - name: Install Better Search Replace Plugin
      command: wp plugin install better-search-replace --activate
      args:
        chdir: /home/ec2-user/html
    - name: Install All 404 Redirect to Homepage Plugin
      command: wp plugin install all-404-redirect-to-homepage --activate
      args:
        chdir: /home/ec2-user/html



    # - name: install SQLite Object Cache plugin
    #   command: wp plugin install sqlite-object-cache --activate
    #   args:
    #     chdir: /home/ec2-user/html


