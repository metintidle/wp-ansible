---
- name: Install and Configure CrowdSec for WordPress
  hosts: all
  become: yes
  tasks:
    - name: Upload security configuration file
      ansible.builtin.copy:
        src: configs/security.conf
        dest: /etc/nginx/conf.d/security.conf
        owner: root
        group: root
        mode: "0644"
    - name: Add CrowdSec repository
      shell: >
        curl -s https://packagecloud.io/install/repositories/crowdsec/crowdsec/script.rpm.sh | bash

    - name: Install CrowdSec
      yum:
        name: crowdsec
        state: present

    - name: Install firewall bouncer for iptables
      yum:
        name: crowdsec-firewall-bouncer-iptables
        state: present

    - name: Install required packages for testing
      yum:
        name: ngrep
        state: present

    - name: Enable CrowdSec service
      systemd:
        name: crowdsec
        enabled: yes
        state: started

    - name: Enable CrowdSec firewall bouncer
      systemd:
        name: crowdsec-firewall-bouncer
        enabled: yes
        state: started

    - name: Install WordPress specific collection
      shell: cscli collections install crowdsecurity/wordpress
      register: wordpress_collection
      changed_when: "'Nothing to do.' not in wordpress_collection.stdout"

    - name: Install WordPress XML-RPC brute force protection
      shell: cscli scenarios install crowdsecurity/http-bf-wordpress_bf_xmlrpc
      register: wordpress_xmlrpc
      changed_when: "'Nothing to do.' not in wordpress_xmlrpc.stdout"

    - name: Reload CrowdSec to apply new configurations
      systemd:
        name: crowdsec
        state: reloaded

    - name: Check if CrowdSec is properly connected to the central API
      shell: cscli capi status
      register: capi_status
      changed_when: false
      failed_when: "'You can successfully interact with Central API (CAPI)' not in capi_status.stdout"

    - name: Create backup of nginx.conf if it doesn't exist
      copy:
        src: /etc/nginx/nginx.conf
        dest: /etc/nginx/nginx.conf.backup
        remote_src: yes
        force: no

    # Optional: Configure Nginx to log proper client IP when behind a proxy
    - name: Configure Nginx for proper IP logging when behind a proxy
      blockinfile:
        path: /etc/nginx/nginx.conf
        insertafter: "http {"
        block: |
          # Set real IP if behind a proxy
          set_real_ip_from 10.0.0.0/8;
          set_real_ip_from 172.16.0.0/12;
          set_real_ip_from 192.168.0.0/16;
          real_ip_header X-Forwarded-For;
          real_ip_recursive on;
      notify: Reload Nginx

    - name: enroll the host in the CrowdSec Central API
      shell: cscli console enroll -e context {{ lookup('env', 'CROWD_SEC') }} --name {{ domain_name }}
      register: enroll_result
      changed_when: "'You are already enrolled' not in enroll_result.stdout and 'You have been successfully enrolled' in enroll_result.stdout"

    # - name: Disable specific CrowdSec scenarios
    #   ansible.builtin.shell: "cscli scenarios remove {{ item }} --force"
    #   loop:
    #     - crowdsecurity/f5-big-ip-cve-2020-5902
    #     - crowdsecurity/fortinet-cve-2018-13379
    #     - crowdsecurity/grafana-cve-2021-43798
    #     - crowdsecurity/vmware-cve-2022-22954
    #     - crowdsecurity/vmware-vcenter-vmsa-2021-0027
    #     - crowdsecurity/pulse-secure-sslvpn-cve-2019-11510
    #     - crowdsecurity/CVE-2017-9841
    #     - crowdsecurity/CVE-2019-18935
    #   register: disable_scenarios_result
    #   changed_when: "'was already disabled' not in disable_scenarios_result.stdout and 'was not installed' not in disable_scenarios_result.stdout"
    #   notify: Reload CrowdSec

  handlers:
    - name: Reload Nginx
      systemd:
        name: nginx
        state: reloaded
    - name: Reload CrowdSec to apply new configurations
      systemd:
        name: crowdsec
        state: reloaded
