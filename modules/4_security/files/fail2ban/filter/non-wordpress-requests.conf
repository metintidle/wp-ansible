# 2. Filter configuration - non-wordpress-requests-filter.conf (in filter.d directory)
[Definition]
# IMPORTANT: This approach focuses on detecting malicious patterns instead of trying to
# whitelist all legitimate URLs, which is nearly impossible with WordPress pretty URLs.
# We'll only match requests that result in error codes AND contain suspicious patterns.

# This matches common attack patterns rather than trying to whitelist all WordPress paths
failregex = ^<HOST> -.*"(GET|POST|HEAD) .*(\.env|\.git|\.svn|\.htaccess|cgi-bin|wp-config\.php|config\.php|xmlrpc\.php|shell|admin\.php|\.sql|\.zip|wp-config\.bak|wp-config\.old|backup|db-?dump|database|db\.sql|\.bak|\.tar\.gz|\.tar|\.7z).*" (404|403|400) .*$
            ^<HOST> -.*"(GET|POST) .*(\.php\?).*(\=SELECT|\=UNION|\=CONCAT|\=\.\./|\=\\x|%0|script\>|\<script)" .*$
            ^<HOST> -.*".*(passwd|setup|install|hack|shell|backdoor)\.php.*" (404|403|400) .*$
            ^<HOST> -.*"(POST) /xmlrpc\.php.*" .*$
            ^<HOST> -.*"(POST) /wp-login\.php" (404|403|401) .*$
            ^<HOST> -.*"\\\x.*" .*$

# These patterns indicate the request is for a legitimate WordPress page (don't match these)
ignoreregex = ^<HOST> -.*"(GET|POST|HEAD) /(wp-admin|wp-login\.php|wp-content|wp-includes|admin-ajax\.php|index\.php|wp-cron\.php|wp-json|favicon\.ico|robots\.txt|about|traffic|employment|gallery|blog|contact).*" .* 200 .*$