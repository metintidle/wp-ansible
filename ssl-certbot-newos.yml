---
- name: Setup SSL on Amazon Linux
  hosts: all
  become: yes
  vars:
    domain_names:
    - "{{ domain_name | default('') }}"
    - "{{ domain_name1 | default('') }}"
    - "{{ domain_name2 | default('') }}"
    - "{{ domain_name3 | default('') }}"

  tasks:
  - name: if domain name is not provided, exit
    fail:
      msg: "Please provide a domain name using --extra-vars 'domain_name=example.com'"
    when: domain_names == ['']
  - name: find the domain name in nginx.conf
    shell: "grep -oP 'server_name\\s+\\K[^;]+' /etc/nginx/nginx.conf"
    register: nginx_domain_names

  - name: Set domain names with www subdomains
    set_fact:
      processed_domain_names: "{{ domain_names | select('match', '^[^\\s]+$') | select('string') | map('regex_replace', '^(.*)$', '\\1 www.\\1') | join(' ') }}"

  - name: Print processed domain names
    debug:
      msg: "Processed domain names: {{ processed_domain_names }}"

  - name: Replace server_name in nginx.conf
    lineinfile:
      path: /etc/nginx/nginx.conf
      regexp: '^\s*server_name\s*_;\s*$'
      line: server_name {{ processed_domain_names }};
    when: domain_name not in nginx_domain_names.stdout

  - name: Restart Nginx
    service:
      name: nginx
      state: restarted

  - name: Install Certbot using dnf
    dnf:
      name:
        - certbot
        - python3-certbot-nginx
      state: present

  - name: Obtain Let's Encrypt SSL certificate
    set_fact:
      certbot_command: certbot --nginx --non-interactive --redirect --agree-tos --email wp.monitoring.log@gmail.com {{ domain_args }}
    vars:
      domain_args: "{{ domain_names | select('match', '^[^\\s]+$') | select('string') | map('regex_replace', '^(.*)$', '-d \\1 -d www.\\1 ') | list | join(' ') }}"
    # register: certbot_result
    # changed_when: "'Congratulations' in certbot_result.stdout"

  - name: Print Certbot command
    debug:
      msg: "{{ certbot_command }}"

  # - name: Check if SSL certificate file exists
  #   stat:
  #     path: /etc/letsencrypt/live/{{domain_name}}/fullchain.pem
  #   register: cert_file

  # - name: Check if SSL private key file exists
  #   stat:
  #     path: /etc/letsencrypt/live/{{domain_name}}/privkey.pem
  #   register: key_file

  # - name: Debug SSL certificate file status
  #   debug:
  #     var: cert_file.stat.exists

  # - name: Debug SSL private key file status
  #   debug:
  #     var: key_file.stat.exists

  - name: Run Certbot command
    command: "{{ certbot_command }}"
    # when: not cert_file.stat.exists or not key_file.stat.exists

  - name: Check if the cron job for Certbot exists
    shell: "crontab -l | grep -q 'certbot renew --quiet'"
    register: cron_job_exists
    ignore_errors: yes

  - name: Remove the cron job for Certbot if it exists
    shell: "crontab -l | grep -v 'certbot renew --quiet' | crontab -"
    when: cron_job_exists.rc == 0

  - name: Run Certbot renewal and reload Nginx if the cron job existed
    shell: "sudo certbot renew --nginx --force-renewal && sudo systemctl reload nginx"
    when: cron_job_exists.rc == 0

  - name: Enable certbot-renew.timer
    command: systemctl enable certbot-renew.timer

  - name: Start certbot-renew.timer
    command: systemctl start certbot-renew.timer

  - name: Create a bash file in /etc/letsencrypt/renewal-hooks/post/
    ansible.builtin.copy:
      dest: /etc/letsencrypt/renewal-hooks/post/renewal_script.sh
      content: |
        #!/bin/bash
        echo "Renewal script executed"
      mode: '0755'
      owner: root
      group: root

  - name: Test Nginx configuration
    command: nginx -t
    register: nginx_test_result
    ignore_errors: yes

  - name: Restart Nginx
    service:
      name: nginx
      state: restarted
    when: nginx_test_result.rc == 0

  - name: Fetch public IP address
    uri:
      url: http://checkip.amazonaws.com
      return_content: yes
    register: public_ip
    become: false
    become_user: ec2-user

  - name: replace current ip with domaine name by wp cli
    command: /usr/local/bin/wp search-replace --all-tables http://{{ public_ip.content | trim }} https://{{ domain_name }}
    args:
      chdir: /home/ec2-user/html
    register: wp_search_replace
    become: false
    become_user: ec2-user

  # - name: Display search-replace result
  #   debug:
  #     var: wp_search_replace.stdout
  #   become: false
  #   become_user: ec2-user

  # - name: Check if Wordfence is installed
  #   command: /usr/local/bin/wp plugin is-installed wordfence
  #   args:
  #     chdir: /home/ec2-user/html
  #   register: wp_wordfence_installed
  #   failed_when: false
  #   become: false
  #   become_user: ec2-user

  # - name: Activate Wordfence if installed
  #   command: /usr/local/bin/wp plugin activate wordfence
  #   args:
  #     chdir: /home/ec2-user/html
  #   when: wp_wordfence_installed.rc == 0
  #   register: wp_wordfence_activated
  #   become: false
  #   become_user: ec2-user

  # - name: Install and activate Wordfence if not installed
  #   command: /usr/local/bin/wp plugin install wordfence --activate
  #   args:
  #     chdir: /home/ec2-user/html
  #   when: wp_wordfence_installed.rc != 0
  #   register: wp_wordfence
  #   become: false
  #   become_user: ec2-user
