- name: Download WordPress files from remote server
  hosts: all # This runs on target servers
  gather_facts: false

  vars:
    source_private_key_raw: "{{ lookup('env', 'PRIVATE_KEY') }}"
    source_host_ip: "{{ lookup('env', 'IP') }}"
    source_user: "ec2-user"
    private_key_path: "/tmp/source_key.pem"

  tasks:
  - name: Write SSH private key for source server on localhost
    copy:
      content: "{{ source_private_key_raw | replace('\\n', '\n')}}"
      dest: "{{ private_key_path }}"
      mode: '0600'
    run_once: true

  - name: Copy private key formatting script
    copy:
      src: bash/privatekey.sh
      dest: /tmp/privatekey.sh
      mode: '0755'
    run_once: true

  - name: Fix private key format with proper newlines
    shell: /tmp/privatekey.sh "{{ private_key_path }}"
    run_once: true
    register: format_debug

  - name: Verify private key file exists and has correct permissions
    stat:
      path: "{{ private_key_path }}"
    register: key_stat
    run_once: true

  - name: Debug private key info
    debug:
      msg:
        - "Private key exists: {{ key_stat.stat.exists }}"
        - "Private key permissions: {{ key_stat.stat.mode | default('N/A') }}"
        - "Private key path: {{ private_key_path }}"
    run_once: true

  - name: Create compressed archive on remote server
    shell: |
        tar -czf /tmp/wordpress.tar.gz -C {{ wordpress_source_path | default('/usr/share/nginx/html') }} . \
          --exclude='.git' \
          --exclude='*.log' \
          --exclude='wp-content/wpvividbackups' \
          --exclude='wp-content/wpvivid_uploads' \
          --exclude='wp-content/wpvivid_staging' \
          --exclude='wp-content/upgrade-temp-backup' \
          --exclude='wp-content/backups' \
          --exclude='wp-content/plugins/akismet' \
          --exclude='wp-content/plugins/hello.php' \
          --exclude='.htaccess' \
          --exclude='wp-content/themes/twentytwentyone' \
          --exclude='wp-content/themes/twentytwentythree' \
          --exclude='wp-content/themes/twentytwentytwo' \
          --exclude='wp-content/themes/twentytwentyfive' \
          --exclude='wp-content/themes/twentytwentyfour' \
          --exclude='wp-content/*.zip'
    delegate_to: "{{ source_host_ip }}"
    vars:
        ansible_user: "{{ source_user }}"
        ansible_ssh_private_key_file: "{{ private_key_path }}"
        ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'

  - name: Download compressed archive from remote server
    shell: |
      scp -i {{ private_key_path }} -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
        "{{ source_user }}@{{ source_host_ip }}:/tmp/wordpress.tar.gz" \
        "/tmp/wordpress.tar.gz"
    register: download_result

  - name: Extract WordPress files
    shell: |
      cd /usr/share/nginx/html/ && \
      tar -xzf /tmp/wordpress.tar.gz
    become: true
    register: extract_result

  - name: Clean up remote archive
    shell: rm -f /tmp/wordpress.tar.gz
    delegate_to: "{{ source_host_ip }}"
    vars:
      ansible_user: "{{ source_user }}"
      ansible_ssh_private_key_file: "{{ private_key_path }}"
      ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    ignore_errors: true

  - name: Clean up local archive
    file:
      path: /tmp/wordpress.tar.gz
      state: absent

  # - name: Download WordPress files from source server
  #   shell: |
  #     rsync -az --progress \
  #       --exclude='.git' \
  #       --exclude='*.log' \
  #       --exclude='wp-content/wpvividbackups' \
  #       --exclude='wp-content/wpvivid_uploads' \
  #       --exclude='wp-content/wpvivid_staging' \
  #       --exclude='wp-content/upgrade-temp-backup' \
  #       --exclude='wp-content/backups' \
  #       --exclude='wp-content/plugins/akismet' \
  #       --exclude='wp-content/plugins/hello.php' \
  #       --exclude='.htaccess' \
  #       --exclude='wp-content/themes/twentytwentyone' \
  #       --exclude='.htaccess*' \
  #       --exclude='wp-includes' \
  #       --exclude='wp-admin' \
  #       --exclude='wp-content/upgrade' \
  #       --exclude='wp-content/cache' \
  #       --exclude='wp-content/themes/twentytwentythree' \
  #       --exclude='wp-content/themes/twentytwentytwo' \
  #       --exclude='wp-content/themes/twentytwentyfive' \
  #       --exclude='wp-content/themes/twentytwentyfour' \
  #       --exclude='wp-content/*.zip' \
  #       -e "ssh -i {{ private_key_path }} -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" \
  #       "{{ source_user }}@{{ source_host_ip }}:{{ wordpress_source_path | default('/usr/share/nginx/html/') }}" \
  #       "/usr/share/nginx/html/"
  #   register: rsync_result
  #   become: true


  # - name: Display rsync result
  #   debug:
  #     msg:
  #       - "Rsync return code: {{ rsync_result.rc }}"
  #       - "Rsync stdout: {{ rsync_result.stdout }}"
  #       - "Rsync stderr: {{ rsync_result.stderr }}"

  - name: Check if elementor css directory exists on source server
    shell: |
      ssh -i {{ private_key_path }} -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
        {{ source_user }}@{{ source_host_ip }} \
        "test -d ~/html/wp-content/uploads/elementor/css"
    register: css_dir_check_raw
    ignore_errors: yes
    run_once: true
    tags: css_backup

  - name: Set css directory check result for all hosts
    set_fact:
      css_dir_exists: "{{ css_dir_check_raw.rc == 0 }}"
    when: css_dir_check_raw is defined
    run_once: true
    tags: css_backup

  - name: Set css directory check result for other hosts
    set_fact:
      css_dir_exists: "{{ hostvars[groups['all'][0]]['css_dir_exists'] | default(false) }}"
    when: css_dir_check_raw is not defined
    tags: css_backup

  - name: Compress elementor css files on source server
    shell: |
      ssh -i {{ private_key_path }} -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
        {{ source_user }}@{{ source_host_ip }} \
        "cd ~/html/wp-content/uploads/elementor/css && tar -czf /tmp/elementor-css-backup.tar.gz ."
    register: compress_result_raw
    when: css_dir_exists | bool
    run_once: true
    tags: css_backup

  - name: Set compress result for all hosts
    set_fact:
      compress_succeeded: "{{ compress_result_raw is succeeded }}"
    when: compress_result_raw is defined
    run_once: true
    tags: css_backup

  - name: Set compress result for other hosts
    set_fact:
      compress_succeeded: "{{ hostvars[groups['all'][0]]['compress_succeeded'] | default(false) }}"
    when: compress_result_raw is not defined
    tags: css_backup

  - name: Download compressed elementor css files from source server
    shell: |
      scp -i {{ private_key_path }} -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
        {{ source_user }}@{{ source_host_ip }}:/tmp/elementor-css-backup.tar.gz \
        /tmp/elementor-css-backup.tar.gz
    register: download_css_result_raw
    when: css_dir_exists | bool and compress_succeeded | bool
    run_once: true
    tags: css_backup

  - name: Set download result for all hosts
    set_fact:
      download_succeeded: "{{ download_css_result_raw is succeeded }}"
    when: download_css_result_raw is defined
    run_once: true
    tags: css_backup

  - name: Set download result for other hosts
    set_fact:
      download_succeeded: "{{ hostvars[groups['all'][0]]['download_succeeded'] | default(false) }}"
    when: download_css_result_raw is not defined
    tags: css_backup

  - name: Extract elementor css files to target server
    shell: |
      mkdir -p /usr/share/nginx/html/wp-content/uploads/elementor/css
      cd /usr/share/nginx/html/wp-content/uploads/elementor/css
      tar -xzf /tmp/elementor-css-backup.tar.gz
    become: true
    when: css_dir_exists | bool and download_succeeded | bool
    tags: css_backup

  - name: Clean up temporary css backup file
    file:
      path: /tmp/elementor-css-backup.tar.gz
      state: absent
    run_once: true
    tags: css_backup


  - name: Fix ownership after download
    file:
      path: /usr/share/nginx/html/
      owner: ec2-user
      group: nginx
      recurse: yes
    become: true
    tags: css_backup


  - name: Remove temporary private key from target server
    file:
      path: "{{ private_key_path }}"
      state: absent
    run_once: true
