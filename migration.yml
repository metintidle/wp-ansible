- name: Download WordPress files from remote server
  hosts: all  # This runs on target servers
  gather_facts: false

  vars:
    source_private_key_raw: "{{ lookup('env', 'PRIVATE_KEY') }}"
    source_host_ip: "{{ lookup('env', 'IP') }}"
    source_user: "ec2-user"
    private_key_path: "/tmp/source_key.pem"

  tasks:
  - name: Write SSH private key for source server on localhost
    copy:
      content: "{{ source_private_key_raw | replace('\\n', '\n') }}"
      dest: "{{ private_key_path }}"
      mode: '0600'
    delegate_to: localhost
    run_once: true

  - name: Fix private key format with proper newlines
    shell: |
      # Read the key and format it properly
      key_content=$(cat {{ private_key_path }})

      # Remove any existing newlines and spaces, then format properly
      echo "$key_content" | tr -d '\n\r' | \
      sed 's/-----BEGIN RSA PRIVATE KEY-----/-----BEGIN RSA PRIVATE KEY-----\n/' | \
      sed 's/-----END RSA PRIVATE KEY-----/\n-----END RSA PRIVATE KEY-----/' | \
      sed 's/\(.\{64\}\)/\1\n/g' | \
      sed '/^$/d' > {{ private_key_path }}.tmp

      cp {{ private_key_path }}.tmp {{ private_key_path }}
      chmod 600 {{ private_key_path }}
    delegate_to: localhost
    run_once: true

  - name: Verify private key format
    shell: |
      head -1 {{ private_key_path }}
      tail -1 {{ private_key_path }}
    delegate_to: localhost
    run_once: true
    register: key_check

  - name: Display key format check
    debug:
      var: key_check.stdout_lines
    delegate_to: localhost
    run_once: true

  - name: Print private key file content
    shell: cat {{ private_key_path }}
    delegate_to: localhost
    run_once: true
    register: key_content

  - name: Display private key content
    debug:
      var: key_content.stdout_lines
    delegate_to: localhost
    run_once: true

  - name: Test SSH connection to source server
    shell: |
      ssh -i {{ private_key_path }} \
          -o StrictHostKeyChecking=no \
          -o UserKnownHostsFile=/dev/null \
          -o ConnectTimeout=10 \
          {{ source_user }}@{{ source_host_ip }} \
          "echo 'SSH connection successful'"
    delegate_to: localhost
    run_once: true
    register: ssh_test
    ignore_errors: yes

  - name: Display SSH test result
    debug:
      msg:
        - "SSH test return code: {{ ssh_test.rc }}"
        - "SSH test stdout: {{ ssh_test.stdout }}"
        - "SSH test stderr: {{ ssh_test.stderr }}"
    delegate_to: localhost
    run_once: true

  - name: Verify key permissions and ownership
    shell: |
      ls -la {{ private_key_path }}
      file {{ private_key_path }}
    delegate_to: localhost
    run_once: true
    register: key_info

  - name: Display key info
    debug:
      var: key_info.stdout_lines
    delegate_to: localhost
    run_once: true

  - name: Download WordPress files from source server
    synchronize:
      src: "{{ wordpress_source_path | default('/usr/share/nginx/html/') }}"
      dest: "/usr/share/nginx/html/"
      delete: yes
      rsync_opts:
        - "--exclude=.git"
        - "--exclude=*.log"
      mode: pull
    delegate_to: localhost
    vars:
      ansible_host: "{{ source_host_ip }}"
      ansible_user: "{{ source_user }}"
      ansible_ssh_private_key_file: "{{ private_key_path }}"
      ansible_ssh_common_args: "-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"

  - name: Fix ownership after download
    file:
      path: /usr/share/nginx/html/
      owner: ec2-user
      group: nginx
      recurse: yes

  - name: Remove temporary private key from localhost
    file:
      path: "{{ private_key_path }}"
      state: absent
    delegate_to: localhost
    run_once: true
